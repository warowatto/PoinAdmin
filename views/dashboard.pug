extend layout

//- 총 판매 현황
//- 미결제된 판매현황 / 기 결제된 판매현황
//- 설치된 장치목록

block csss
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.0/css/bootstrap-datepicker3.min.css")
    style.
        .datepicker.dropdown-menu {
            visibility: visible;
            opacity: 1;
            width: auto;
        }

block contents
    #content.col-md-12
        //- 총 판매 현황(2분류로 나눠짐, 결제가 되었는지?)
        .card
            .header
                h4.title PayOT 지불현황
            .content.table-responsive.table-full-width
                table.table.table-hover.table-striped
                    thead
                        th 제목
                        th 내용
                        th 가격
                        th 일자
                    tbody
                        tr(v-for="payment in payments")
                            td {{ payment.title }}
                            td {{ payment.description }}
                            td {{ payment.amount }}
                            td {{ convertDate(payment.pay_at) }}
        //- 상품 판매현황
        .card
            .header
                h4.title 상품별 판매현황
                .row
                    .col-md-8
                        .input-group.input-daterange
                            input.datepicker.form-control(type="text" v-model="startDate")
                            .input-group-addon ~
                            input.datepicker.form-control(type="text" v-model="endDate")
                    .col-md-2
                        select.from-control(v-model="bill" v-on:change="update")
                            option 미수금
                            option 수금완료
                    .col-md-2
                        button.btn.btn-info.btn-fill.pull-right(v-on:click="update") 조회하기
            .content.table-responsive.table-full-width
                table.table.table-hover.table-striped
                    thead
                        th 상품명
                        th 상품당 판매수익
                        th 판매액
                        th 판매한 장치수
                        th 판매횟수
                    tbody
                        tr(v-for="sell in sells")
                            td {{ sell.name }}
                            td {{ getSellPrice(sell) }}
                            td {{ getTotal(sell) }}
                            td {{ sell.machines }}
                            td {{ sell.counter }}
        
        .card
            .header
                h4.title 상세 판매현황
                .row
                    .col-md-8
                        .input-group.input-daterange
                            input.datepicker.form-control(type="text" v-model="startDate2")
                            .input-group-addon ~
                            input.datepicker.form-control(type="text" v-model="endDate2")
                    .col-md-2
                        select.from-control(v-model="bill2" v-on:change="update")
                            option 미수금
                            option 수금완료
                    .col-md-2
                        button.btn.btn-info.btn-fill.pull-right(v-on:click="update") 조회하기
            .content.table-responsive.table-full-width
                table.table.table-hover.table-striped
                    thead
                        th 상품명
                        th MAC
                        th 결제장치
                        th 결제가격
                        th 지급여부
                        th 결제일자
                    tbody
                        tr(v-for="item in allPayments")
                            td {{ item.name }}
                            td {{ item.macAddress }}
                            td {{ item.displayName }}
                            td {{ item.price }}
                            td 
                                p(v-if="item.sendToCompany == 0").text-primary 결제대기
                                p(v-if="item.sendToCompany != 0").text-success 결제완료
                                
                            td {{ convertDate(item.pay_at) }}

block scripts
    script(src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.0/js/bootstrap-datepicker.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.0/locales/bootstrap-datepicker.ko.min.js")
    
    script.
        $(function() {
            $('.input-daterange input').each(function() {
                $(this).datepicker({
                    format: 'yyyy-mm-dd',
                    language: 'ko'
                });
            });
        });

        var vm = new Vue({
            el: '#content',
            data() {

                let cv = function(date) {
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear();

                    if (month.length < 2) month = '0' + month;
                    if (day.length < 2) day = '0' + day;

                    return [year, month, day].join('-');
                };

                let now = new Date();

                return {
                    bill: '미수금',
                    bill2: '미수금',
                    payments: [],
                    sells: [],
                    allPayments: [],
                    startDate: cv(new Date().setDate(now.getDate() - 7)),
                    endDate: cv(new Date()),
                    startDate2: cv(new Date().setDate(now.getDate() - 7)),
                    endDate2: cv(new Date())
                }
            },
            created () {
                let self = this;
                let type = self.isBills() ? 'true' : 'false';

                axios.get('/api/payments')
                    .then(result => {
                        self.payments = result.data;
                    });
                let state = self.bill2 == '미수금' ? 'false' : 'true';

                let path1 = `/api/sellList/${self.startDate}/${self.endDate}/${self.bill == '미수금' ? 'false' : 'true'}`;
                let path2 = `/api/all/${self.startDate}/${self.endDate}/${self.bill2 == '미수금' ? 'false' : 'true'}`;

                axios.get(path1)
                    .then(result => {
                        let data = result.data;
                        self.sells = data;
                    });

                axios.get(path2)
                    .then(result => {
                        self.allPayments = result.data
                    });
            },
            methods: {
                convertDate: function(date) {
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear();

                    if (month.length < 2) month = '0' + month;
                    if (day.length < 2) day = '0' + day;

                    return [year, month, day].join('-');
                },
                update: function() {
                    let self = this;
                    self.dateUpdate();

                    axios.get('/api/payments')
                        .then(result => {
                            self.payments = result.data;
                        });

                    let path1 = `/api/sellList/${self.startDate}/${self.endDate}/${self.bill == '미수금' ? 'false' : 'true'}`;
                    let path2 = `/api/all/${self.startDate2}/${self.endDate2}/${self.bill2 == '미수금' ? 'false' : 'true'}`;

                    axios.get(path1)
                        .then(result => {
                            let data = result.data;
                            self.sells = data;
                        });

                    axios.get(path2)
                        .then(result => {
                            self.allPayments = result.data
                        });
                },
                isBills: function() {
                    return this.bill == '수급완료';
                },
                convertDate: function(date) {
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear();

                    if (month.length < 2) month = '0' + month;
                    if (day.length < 2) day = '0' + day;

                    return [year, month, day].join('-');
                },
                dateUpdate: function() {
                    let datePicker = $('.datepicker');
                    
                    this.startDate = datePicker[0].value;
                    this.endDate = datePicker[1].value;
                    this.startDate2 = datePicker[2].value;
                    this.endDate2 = datePicker[3].value;
                },
                getTotal: function(payment) {
                    if (payment.checks == 1) {
                        return payment.total;
                    } else {
                        let price = this.getSellPrice(payment);
                        return price * payment.counter;
                    }
                },
                getSellPrice: function(payment) {
                    if (payment.checks == 1) {
                        return payment.price;
                    } else {
                        let price = payment.machinePrice + ((payment.price - payment.machinePrice) / 2);
                        return price - (price * 0.032);
                    }
                }
            },
            computed: {
                isBills: function() {
                    return this.bill == '수급완료';
                }
            }
        });